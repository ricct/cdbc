{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site is under construction About CDBC Cdbc is .NET library which can provide proxy access to cloud database. It consists of Cdbc Client and Cdbc Service.Cdbc Client connect to Cdbc Service which can provide proxy access to database. Cdbc Service use WCF and run on Microsoft IIS so Windows instance on cloud is needed. Benefits and features Licence","title":"Home"},{"location":"#this-site-is-under-construction","text":"","title":"This site is under construction"},{"location":"#about-cdbc","text":"Cdbc is .NET library which can provide proxy access to cloud database. It consists of Cdbc Client and Cdbc Service.Cdbc Client connect to Cdbc Service which can provide proxy access to database. Cdbc Service use WCF and run on Microsoft IIS so Windows instance on cloud is needed.","title":"About CDBC"},{"location":"#benefits-and-features","text":"","title":"Benefits and features"},{"location":"#licence","text":"","title":"Licence"},{"location":"language/","text":"Languages English \u65e5\u672c\u8a9e","title":"Languages"},{"location":"language/#languages","text":"English \u65e5\u672c\u8a9e","title":"Languages"},{"location":"license/","text":"About CDBC CDBC can provide proxy access to Cloud Database. It consists of CDBC Client and CDBC Service.CDBC Client connect to CDBC Service which can provide proxy access to Database. CDBC Service use WCF and run on Microsoft IIS so Windows instance on cloud is needed. How to get CDBC You can download CDBC service and client from following page. https://cdbc.cloud/download.html You can also get CDBC client from NuGet .","title":"About CDBC"},{"location":"license/#about-cdbc","text":"CDBC can provide proxy access to Cloud Database. It consists of CDBC Client and CDBC Service.CDBC Client connect to CDBC Service which can provide proxy access to Database. CDBC Service use WCF and run on Microsoft IIS so Windows instance on cloud is needed.","title":"About CDBC"},{"location":"license/#how-to-get-cdbc","text":"You can download CDBC service and client from following page. https://cdbc.cloud/download.html You can also get CDBC client from NuGet .","title":"How to get CDBC"},{"location":"start/","text":"This site is under construction How to get CDBC CDBC service download CDBC service is WCF service and it should be deployed to windows IIS server. Cdbc service latest version CDBC Client download CDBC Client include dlls which can help to access CDBC service. Cdbc Client latest version It is recommended to get CDBC client using NuGet.","title":"Getting Started"},{"location":"start/#this-site-is-under-construction","text":"","title":"This site is under construction"},{"location":"start/#how-to-get-cdbc","text":"","title":"How to get CDBC"},{"location":"start/#cdbc-service-download","text":"CDBC service is WCF service and it should be deployed to windows IIS server.","title":"CDBC service download"},{"location":"start/#cdbc-service-latest-version","text":"","title":"Cdbc service latest version"},{"location":"start/#cdbc-client-download","text":"CDBC Client include dlls which can help to access CDBC service.","title":"CDBC Client download"},{"location":"start/#cdbc-client-latest-version","text":"It is recommended to get CDBC client using NuGet.","title":"Cdbc Client latest version"},{"location":"setupservice/configservice/","text":"Config CDBC service Overview In the CDBC service configuration. You can set user authentication method, application authentication , databse connection string and other informations. Configurations <configSections> Description Used to add configuration section declaration.Please don't change it. XML example <configSections> <section name= \"log4net\" type= \"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> <section name= \"cdbcService\" type= \"CdbcServiceUtils.Config.CdbcConfigurationSectionHandler, CdbcServiceUtils\" /> </configSections> <cdbcService> Description Configurations used by cdbcService. XML example <cdbcService> <userAuthentication authMethod= \"None or UserPsk\" > <authenticatedUsers> <add userId= \"\" userPsk= \"\" comment= \"\" /> </authenticatedUsers> </userAuthentication> <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > <authenticatedApplications> <add applicationId= \"\" applicationPsk= \"\" comment= \"\" /> </authenticatedApplications> </clientApplicationAuthentication> <idps enabled= \"true\" accessBlockFailureCount= \"3\" accessBlockSeconds= \"5\" failureResetSeconds= \"600\" /> <connectionStrings> <add name= \"\" connectionString= \"\" providerName= \"\" /> </connectionStrings> <cdbcServiceInfo serviceVersion= \"4.5.0.1905\" supportedClientVersion= \"4.5.0.1905\" infoHtmlFile= \"index.html\" /> </cdbcService> <userAuthentication> Description Only authenticated user can access cdbc service. You can configure user authorization method and psks in this session. <userAuthentication authMethod= \"None , Basic or UserPsk\" > Attributes Attribute Description Value Remarks authMethod User authorization method. None , Basic or UserPsk None - No user authorization. Any user can access the service. Basic - Use IIS basic authorization. Any user can access the service. UserPsk - Use Pre-Shared Key for each user. <authenticatedUsers> Description Authenticated user list can be stored in the authenticatedUsers section. You can use the AuthenticatedUsersCollection to retrieve authenticated users from application configuration files. Its properties map to authenticated user attributes, allowing you to retrieve a single authenticated user specifying the userId. <authenticatedUsers> <add userId= \"\" userPsk= \"\" comment= \"\" /> </authenticatedUsers> Attributes Attribute Description Value Remarks userId User ID String userPsk User psk (16 digital) String comment Comment of the user, It will not be used by the system String <clientApplicationAuthentication> Description Only authenticated client application can access cdbc service. You can configure client application authorization method and psks in this session <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > Attributes Attribute Description Value Remarks authMethod Client application authorization method. None or ApplicationPsk <authenticatedApplications> Description Authenticated applications list can be stored in the authenticatedApplications section. You can use the AuthenticatedApplicationsCollection to retrieve authenticated applications from application configuration files. Its properties map to authenticated application attributes, allowing you to retrieve a single authenticated applcaition specifying the applicationId. <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > <add applicationId= \"\" applicationPsk= \"\" comment= \"\" /> </clientApplicationAuthentication> Attributes Attribute Description Value Remarks applicationId Applicaion ID String applicationPsk Applicaion psk (16 digital) String comment Comment of the applicaion, It will not be used by the system String <idps> Description Idps is used to block illegal access. The IP address whill be blocked for a specified time period while authorization failed certain time. <idps enabled= \"true\" accessBlockFailureCount= \"3\" accessBlockSeconds= \"5\" failureResetSeconds= \"600\" /> Attributes Attribute Description Value Remarks enabled Enable or disable Idps. If Idps is enabled , Cdbc service will block the IP address after authorization failed certain times. true or false accessBlockFailureCount Set the failure count while start to block access. int accessBlockSeconds How many seconds will the IP be blocked. int failureResetSeconds How many seconds will the failure count be reset. int <connectionStrings> Description Connection strings used by cdbc service can be stored in the connectionStrings section. Please refer microsoft's document to see the details about connectionStrings. <cdbcServiceInfo> Description Information of the service version , supported client version etc . You should not change any value unless get our instruction . Attributes Attribute Description Value Remarks serviceVersion Current version of the Cdbc service. String supportedClientVersion Supported client version. The client whose version >=supportedClientVersion will be supported. String infoHtmlFile The html file to be display while customer access service url. String <log4net> XML Description Cdbc use log4net to log system and audit log. Please refer log4net's document to see the details. <log4net> <appender name= \"RollingLogFileAppenderSystem\" type= \"log4net.Appender.RollingFileAppender,log4net\" > ... </appender> <appender name= \"RollingLogFileAppenderAudit\" type= \"log4net.Appender.RollingFileAppender,log4net\" > ... </appender> <logger name= \"audit\" > <appender-ref ref= \"RollingLogFileAppenderAudit\" /> </logger> <logger name= \"system\" > <appender-ref ref= \"RollingLogFileAppenderSystem\" /> </logger> </log4net> <serviceModel> Description serviceModel session include some wcf configurations for cdbc service . Don't modify it unless you have deep knowledge about wcf. Please refer Microsoft's document to see the details. <system.serviceModel> <bindings> <basicHttpBinding> <binding maxReceivedMessageSize= \"102400000\" /> </basicHttpBinding> <customBinding> <binding name= \"helpPage\" > <textMessageEncoding messageVersion= \"None\" /> <httpTransport/> </binding> </customBinding> </bindings> <services> <service name= \"CdbcService\" > <endpoint address= \"service\" binding= \"basicHttpBinding\" contract= \"ICdbcService\" /> <endpoint address= \"\" binding= \"customBinding\" bindingConfiguration= \"helpPage\" contract= \"IHelpPage\" /> </service> </services> <behaviors> <serviceBehaviors> <behavior> <!-- To avoid disclosing metadata information, set the values below to false before deployment --> <serviceMetadata httpGetEnabled= \"false\" httpsGetEnabled= \"false\" /> <!-- To receive exception details in faults for debugging purposes, set the value below to true. Set to false before deployment to avoid disclosing exception information --> <serviceDebug includeExceptionDetailInFaults= \"false\" httpHelpPageEnabled= \"false\" httpsHelpPageEnabled= \"false\" /> </behavior> </serviceBehaviors> </behaviors> <protocolMapping> <add binding= \"basicHttpsBinding\" scheme= \"https\" /> </protocolMapping> <serviceHostingEnvironment aspNetCompatibilityEnabled= \"true\" multipleSiteBindingsEnabled= \"true\" /> </system.serviceModel> <system.runtime.caching> Description CDBC use memoryCache to improve performance. You can customize the values of memoryCache. Please refer Microsoft's document to see the details. <system.runtime.caching> <memoryCache> <namedCaches> <add name= \"Default\" physicalMemoryLimitPercentage= \"20\" /> </namedCaches> </memoryCache> </system.runtime.caching> Back to index page","title":"Config CDBC service"},{"location":"setupservice/configservice/#config-cdbc-service","text":"","title":"Config CDBC service"},{"location":"setupservice/configservice/#overview","text":"In the CDBC service configuration. You can set user authentication method, application authentication , databse connection string and other informations.","title":"Overview"},{"location":"setupservice/configservice/#configurations","text":"","title":"Configurations"},{"location":"setupservice/configservice/#ltconfigsectionsgt","text":"Description Used to add configuration section declaration.Please don't change it. XML example <configSections> <section name= \"log4net\" type= \"log4net.Config.Log4NetConfigurationSectionHandler, log4net\" /> <section name= \"cdbcService\" type= \"CdbcServiceUtils.Config.CdbcConfigurationSectionHandler, CdbcServiceUtils\" /> </configSections>","title":"&lt;configSections&gt;"},{"location":"setupservice/configservice/#ltcdbcservicegt","text":"Description Configurations used by cdbcService. XML example <cdbcService> <userAuthentication authMethod= \"None or UserPsk\" > <authenticatedUsers> <add userId= \"\" userPsk= \"\" comment= \"\" /> </authenticatedUsers> </userAuthentication> <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > <authenticatedApplications> <add applicationId= \"\" applicationPsk= \"\" comment= \"\" /> </authenticatedApplications> </clientApplicationAuthentication> <idps enabled= \"true\" accessBlockFailureCount= \"3\" accessBlockSeconds= \"5\" failureResetSeconds= \"600\" /> <connectionStrings> <add name= \"\" connectionString= \"\" providerName= \"\" /> </connectionStrings> <cdbcServiceInfo serviceVersion= \"4.5.0.1905\" supportedClientVersion= \"4.5.0.1905\" infoHtmlFile= \"index.html\" /> </cdbcService>","title":"&lt;cdbcService&gt;"},{"location":"setupservice/configservice/#ltuserauthenticationgt","text":"Description Only authenticated user can access cdbc service. You can configure user authorization method and psks in this session. <userAuthentication authMethod= \"None , Basic or UserPsk\" > Attributes Attribute Description Value Remarks authMethod User authorization method. None , Basic or UserPsk None - No user authorization. Any user can access the service. Basic - Use IIS basic authorization. Any user can access the service. UserPsk - Use Pre-Shared Key for each user.","title":"&lt;userAuthentication&gt;"},{"location":"setupservice/configservice/#ltauthenticatedusersgt","text":"Description Authenticated user list can be stored in the authenticatedUsers section. You can use the AuthenticatedUsersCollection to retrieve authenticated users from application configuration files. Its properties map to authenticated user attributes, allowing you to retrieve a single authenticated user specifying the userId. <authenticatedUsers> <add userId= \"\" userPsk= \"\" comment= \"\" /> </authenticatedUsers> Attributes Attribute Description Value Remarks userId User ID String userPsk User psk (16 digital) String comment Comment of the user, It will not be used by the system String","title":"&lt;authenticatedUsers&gt;"},{"location":"setupservice/configservice/#ltclientapplicationauthenticationgt","text":"Description Only authenticated client application can access cdbc service. You can configure client application authorization method and psks in this session <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > Attributes Attribute Description Value Remarks authMethod Client application authorization method. None or ApplicationPsk","title":"&lt;clientApplicationAuthentication&gt;"},{"location":"setupservice/configservice/#ltauthenticatedapplicationsgt","text":"Description Authenticated applications list can be stored in the authenticatedApplications section. You can use the AuthenticatedApplicationsCollection to retrieve authenticated applications from application configuration files. Its properties map to authenticated application attributes, allowing you to retrieve a single authenticated applcaition specifying the applicationId. <clientApplicationAuthentication authMethod= \"None or ApplicationPsk\" > <add applicationId= \"\" applicationPsk= \"\" comment= \"\" /> </clientApplicationAuthentication> Attributes Attribute Description Value Remarks applicationId Applicaion ID String applicationPsk Applicaion psk (16 digital) String comment Comment of the applicaion, It will not be used by the system String","title":"&lt;authenticatedApplications&gt;"},{"location":"setupservice/configservice/#ltidpsgt","text":"Description Idps is used to block illegal access. The IP address whill be blocked for a specified time period while authorization failed certain time. <idps enabled= \"true\" accessBlockFailureCount= \"3\" accessBlockSeconds= \"5\" failureResetSeconds= \"600\" /> Attributes Attribute Description Value Remarks enabled Enable or disable Idps. If Idps is enabled , Cdbc service will block the IP address after authorization failed certain times. true or false accessBlockFailureCount Set the failure count while start to block access. int accessBlockSeconds How many seconds will the IP be blocked. int failureResetSeconds How many seconds will the failure count be reset. int","title":"&lt;idps&gt;"},{"location":"setupservice/configservice/#ltconnectionstringsgt","text":"Description Connection strings used by cdbc service can be stored in the connectionStrings section. Please refer microsoft's document to see the details about connectionStrings.","title":"&lt;connectionStrings&gt;"},{"location":"setupservice/configservice/#ltcdbcserviceinfogt","text":"Description Information of the service version , supported client version etc . You should not change any value unless get our instruction . Attributes Attribute Description Value Remarks serviceVersion Current version of the Cdbc service. String supportedClientVersion Supported client version. The client whose version >=supportedClientVersion will be supported. String infoHtmlFile The html file to be display while customer access service url. String","title":"&lt;cdbcServiceInfo&gt;"},{"location":"setupservice/configservice/#ltlog4netgt","text":"XML Description Cdbc use log4net to log system and audit log. Please refer log4net's document to see the details. <log4net> <appender name= \"RollingLogFileAppenderSystem\" type= \"log4net.Appender.RollingFileAppender,log4net\" > ... </appender> <appender name= \"RollingLogFileAppenderAudit\" type= \"log4net.Appender.RollingFileAppender,log4net\" > ... </appender> <logger name= \"audit\" > <appender-ref ref= \"RollingLogFileAppenderAudit\" /> </logger> <logger name= \"system\" > <appender-ref ref= \"RollingLogFileAppenderSystem\" /> </logger> </log4net>","title":"&lt;log4net&gt;"},{"location":"setupservice/configservice/#ltservicemodelgt","text":"Description serviceModel session include some wcf configurations for cdbc service . Don't modify it unless you have deep knowledge about wcf. Please refer Microsoft's document to see the details. <system.serviceModel> <bindings> <basicHttpBinding> <binding maxReceivedMessageSize= \"102400000\" /> </basicHttpBinding> <customBinding> <binding name= \"helpPage\" > <textMessageEncoding messageVersion= \"None\" /> <httpTransport/> </binding> </customBinding> </bindings> <services> <service name= \"CdbcService\" > <endpoint address= \"service\" binding= \"basicHttpBinding\" contract= \"ICdbcService\" /> <endpoint address= \"\" binding= \"customBinding\" bindingConfiguration= \"helpPage\" contract= \"IHelpPage\" /> </service> </services> <behaviors> <serviceBehaviors> <behavior> <!-- To avoid disclosing metadata information, set the values below to false before deployment --> <serviceMetadata httpGetEnabled= \"false\" httpsGetEnabled= \"false\" /> <!-- To receive exception details in faults for debugging purposes, set the value below to true. Set to false before deployment to avoid disclosing exception information --> <serviceDebug includeExceptionDetailInFaults= \"false\" httpHelpPageEnabled= \"false\" httpsHelpPageEnabled= \"false\" /> </behavior> </serviceBehaviors> </behaviors> <protocolMapping> <add binding= \"basicHttpsBinding\" scheme= \"https\" /> </protocolMapping> <serviceHostingEnvironment aspNetCompatibilityEnabled= \"true\" multipleSiteBindingsEnabled= \"true\" /> </system.serviceModel>","title":"&lt;serviceModel&gt;"},{"location":"setupservice/configservice/#ltsystemruntimecachinggt","text":"Description CDBC use memoryCache to improve performance. You can customize the values of memoryCache. Please refer Microsoft's document to see the details. <system.runtime.caching> <memoryCache> <namedCaches> <add name= \"Default\" physicalMemoryLimitPercentage= \"20\" /> </namedCaches> </memoryCache> </system.runtime.caching> Back to index page","title":"&lt;system.runtime.caching&gt;"},{"location":"setupservice/deployservice/","text":"Deploy CDBC service 1. Download and unzip CDBC service. You can download CDBC service from the following page. CDBC service download page 2. Copy CDBC service files to IIS Copy the folder CdbcService and its entire contents to iis home directory on your web server. e.g. C:\\inetpub\\wwwroot\\CdbcService\\ 3. Convert the cdbc service folder into an Application 3.1 Open Server Manager 3.2 Right-click CdbcService and select Convert to Application. 3.3 When Add application window pop up, click the \u201cOK\u201d button. You can customize the values if you wanted. 4. Confirm CDBC service Navigate http://localhost/CdbcService/CdbcService.svc and http://localhost/CdbcService/ . You should see default cdbc page. You can change localhost into the IP address or your hostname. Go to configure CDBC service Next step is config CDBC service. Config CDBC service Back to index page","title":"Deploy CDBC service"},{"location":"setupservice/deployservice/#deploy-cdbc-service","text":"","title":"Deploy CDBC service"},{"location":"setupservice/deployservice/#1-download-and-unzip-cdbc-service","text":"You can download CDBC service from the following page. CDBC service download page","title":"1. Download and unzip CDBC service."},{"location":"setupservice/deployservice/#2-copy-cdbc-service-files-to-iis","text":"Copy the folder CdbcService and its entire contents to iis home directory on your web server. e.g. C:\\inetpub\\wwwroot\\CdbcService\\","title":"2. Copy CDBC service files to IIS"},{"location":"setupservice/deployservice/#3-convert-the-cdbc-service-folder-into-an-application","text":"3.1 Open Server Manager 3.2 Right-click CdbcService and select Convert to Application. 3.3 When Add application window pop up, click the \u201cOK\u201d button. You can customize the values if you wanted.","title":"3. Convert the cdbc service folder into an Application"},{"location":"setupservice/deployservice/#4-confirm-cdbc-service","text":"Navigate http://localhost/CdbcService/CdbcService.svc and http://localhost/CdbcService/ . You should see default cdbc page. You can change localhost into the IP address or your hostname.","title":"4. Confirm CDBC service"},{"location":"setupservice/deployservice/#go-to-configure-cdbc-service","text":"Next step is config CDBC service. Config CDBC service Back to index page","title":"Go to configure CDBC service"},{"location":"setupservice/installiis/","text":"Install IIS 1. Open Server Manager 2. Click the \u201cAdd roles and features\u201d text. 3. Before you begin On the \"Before you begin\" window, click the Next button. 4. Installation Type On the \"Select installation type\" window, leave \u201cRole-based or feature-based installation\u201d selected and click Next. 5. Server Selection As we're installing to our local machine, leave \u201cSelect a server from the server pool\u201d with the current machine selected and click Next. 6. Server roles From the \"Select server roles\" window, check the box next to \u201cWeb Server (IIS)\u201d. When additional features and feature wizard window pop up, click the \u201cAdd Features\u201d button. Click Next after back to \"Select server roles\" window 7. Features In the \"features\" window, Click \".NET framework 4.6 features\", check \"ASP.NET 4.6\" and \"WCF Services\" - \"HTTP activation\". When additional features and feature wizard window pop up, click the \u201cAdd Features\u201d button. Click Next after back to \"features\" window 8. Web Server Role (IIS) Click Next on the \u201cWeb Server Role (IIS)\u201d window. 9. Select role services In the \"Select role services\" window, Check \"ASP.NET 4.6\" under \"application development\" . Click Next. 10. Confirmation Finally on the \u201cConfirm installation selections\u201d window , review the items that are to be installed and click Install. 11. Result Once the installation has succeeded, click the close button. 12. navigate example page We can perform test by opening up a web browser and browsing to the server that we have installed IIS on. You should see the default IIS page. Back to index page","title":"Install IIS"},{"location":"setupservice/installiis/#install-iis","text":"","title":"Install IIS"},{"location":"setupservice/installiis/#1-open-server-manager","text":"","title":"1. Open Server Manager"},{"location":"setupservice/installiis/#2-click-the-add-roles-and-features-text","text":"","title":"2. Click the \u201cAdd roles and features\u201d text."},{"location":"setupservice/installiis/#3-before-you-begin","text":"On the \"Before you begin\" window, click the Next button.","title":"3. Before you begin"},{"location":"setupservice/installiis/#4-installation-type","text":"On the \"Select installation type\" window, leave \u201cRole-based or feature-based installation\u201d selected and click Next.","title":"4. Installation Type"},{"location":"setupservice/installiis/#5-server-selection","text":"As we're installing to our local machine, leave \u201cSelect a server from the server pool\u201d with the current machine selected and click Next.","title":"5. Server Selection"},{"location":"setupservice/installiis/#6-server-roles","text":"From the \"Select server roles\" window, check the box next to \u201cWeb Server (IIS)\u201d. When additional features and feature wizard window pop up, click the \u201cAdd Features\u201d button. Click Next after back to \"Select server roles\" window","title":"6. Server roles"},{"location":"setupservice/installiis/#7-features","text":"In the \"features\" window, Click \".NET framework 4.6 features\", check \"ASP.NET 4.6\" and \"WCF Services\" - \"HTTP activation\". When additional features and feature wizard window pop up, click the \u201cAdd Features\u201d button. Click Next after back to \"features\" window","title":"7. Features"},{"location":"setupservice/installiis/#8-web-server-role-iis","text":"Click Next on the \u201cWeb Server Role (IIS)\u201d window.","title":"8. Web Server Role (IIS)"},{"location":"setupservice/installiis/#9-select-role-services","text":"In the \"Select role services\" window, Check \"ASP.NET 4.6\" under \"application development\" . Click Next.","title":"9. Select role services"},{"location":"setupservice/installiis/#10-confirmation","text":"Finally on the \u201cConfirm installation selections\u201d window , review the items that are to be installed and click Install.","title":"10. Confirmation"},{"location":"setupservice/installiis/#11-result","text":"Once the installation has succeeded, click the close button.","title":"11. Result"},{"location":"setupservice/installiis/#12-navigate-example-page","text":"We can perform test by opening up a web browser and browsing to the server that we have installed IIS on. You should see the default IIS page. Back to index page","title":"12. navigate example page"},{"location":"setupservice/setupservice/","text":"How to set up CDBC service Install IIS Deploy CDBC service Config CDBC service","title":"How to set up CDBC service"},{"location":"setupservice/setupservice/#how-to-set-up-cdbc-service","text":"Install IIS Deploy CDBC service Config CDBC service","title":"How to set up CDBC service"},{"location":"supportedapi/oraclesupported/","text":"About connecting to Oracle CDBC client offers easy access to remote Oracle database from .NET applications. It has the similar ADO.NET architecture as ODP.NET. Code with familiar classes , properties and methods. But it does not support all functions of ODP.NET. Supported properties and methods are listed below. Version CdbcConnection Supported CdbcCommand CdbcAdapter CdbcCommandBuilder","title":"About connecting to Oracle"},{"location":"supportedapi/oraclesupported/#about-connecting-to-oracle","text":"CDBC client offers easy access to remote Oracle database from .NET applications. It has the similar ADO.NET architecture as ODP.NET. Code with familiar classes , properties and methods. But it does not support all functions of ODP.NET. Supported properties and methods are listed below.","title":"About connecting to Oracle"},{"location":"supportedapi/oraclesupported/#version","text":"","title":"Version"},{"location":"supportedapi/oraclesupported/#cdbcconnection","text":"Supported","title":"CdbcConnection"},{"location":"supportedapi/oraclesupported/#cdbccommand","text":"","title":"CdbcCommand"},{"location":"supportedapi/oraclesupported/#cdbcadapter","text":"","title":"CdbcAdapter"},{"location":"supportedapi/oraclesupported/#cdbccommandbuilder","text":"","title":"CdbcCommandBuilder"},{"location":"supportedapi/sqlserversupported/","text":"About connecting to SQL Server CDBC client offers easy access to remote Oracle database from .NET applications. It has the similar ADO.NET architecture as ODP.NET. Code with familiar classes , properties and methods. But it does not support all functions of ODP.NET. Supported properties and methods are listed below. Version CdbcConnection Supported CdbcCommand CdbcAdapter CdbcCommandBuilder","title":"About connecting to SQL Server"},{"location":"supportedapi/sqlserversupported/#about-connecting-to-sql-server","text":"CDBC client offers easy access to remote Oracle database from .NET applications. It has the similar ADO.NET architecture as ODP.NET. Code with familiar classes , properties and methods. But it does not support all functions of ODP.NET. Supported properties and methods are listed below.","title":"About connecting to SQL Server"},{"location":"supportedapi/sqlserversupported/#version","text":"","title":"Version"},{"location":"supportedapi/sqlserversupported/#cdbcconnection","text":"Supported","title":"CdbcConnection"},{"location":"supportedapi/sqlserversupported/#cdbccommand","text":"","title":"CdbcCommand"},{"location":"supportedapi/sqlserversupported/#cdbcadapter","text":"","title":"CdbcAdapter"},{"location":"supportedapi/sqlserversupported/#cdbccommandbuilder","text":"","title":"CdbcCommandBuilder"},{"location":"usingcdbcclient/clientconfiguration/","text":"CDBC Client Configuration Overview CDBC Service use WCF architecture. To connect to CDBC service system.serviceModel section should be congigured in client application's config file. Configurations <system.serviceModel> Description Used to add configuration section declaration.Please don't change it. XML example <system.serviceModel> <bindings> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" > </binding> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbcdemo.ricct.com/CdbcService/CdbcService.svc/services\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> </system.serviceModel> <bindings> Description Bindings specify the communication mechanism to use when talking to cdbc service and indicate how to connect to cdbc service. <client> Description Specify the endpoint information to connect to cdbc service. Description Specify the endpoint information to connect to cdbc service. XML example <endpoint address= \"https://cdbcdemo.ricct.com/CdbcService/CdbcService.svc/services\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> Attributes Attribute Description Value Remarks address The url of cdbc service binding Binding that will be used. In this sample we use BasicHttpBinding. bindingConfiguration Specify binding configuration name to use. (The binding configuration name should have been set in system.serviceModel section) https://docs.microsoft.com/ja-jp/dotnet/framework/wcf/feature-details/configuring-system-provided-bindings","title":"Client Configuration"},{"location":"usingcdbcclient/clientconfiguration/#cdbc-client-configuration","text":"","title":"CDBC Client Configuration"},{"location":"usingcdbcclient/clientconfiguration/#overview","text":"CDBC Service use WCF architecture. To connect to CDBC service system.serviceModel section should be congigured in client application's config file.","title":"Overview"},{"location":"usingcdbcclient/clientconfiguration/#configurations","text":"","title":"Configurations"},{"location":"usingcdbcclient/clientconfiguration/#ltsystemservicemodelgt","text":"Description Used to add configuration section declaration.Please don't change it. XML example <system.serviceModel> <bindings> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" > </binding> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbcdemo.ricct.com/CdbcService/CdbcService.svc/services\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> </system.serviceModel>","title":"&lt;system.serviceModel&gt;"},{"location":"usingcdbcclient/clientconfiguration/#ltbindingsgt","text":"Description Bindings specify the communication mechanism to use when talking to cdbc service and indicate how to connect to cdbc service.","title":"&lt;bindings&gt;"},{"location":"usingcdbcclient/clientconfiguration/#ltclientgt","text":"Description Specify the endpoint information to connect to cdbc service. Description Specify the endpoint information to connect to cdbc service. XML example <endpoint address= \"https://cdbcdemo.ricct.com/CdbcService/CdbcService.svc/services\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> Attributes Attribute Description Value Remarks address The url of cdbc service binding Binding that will be used. In this sample we use BasicHttpBinding. bindingConfiguration Specify binding configuration name to use. (The binding configuration name should have been set in system.serviceModel section) https://docs.microsoft.com/ja-jp/dotnet/framework/wcf/feature-details/configuring-system-provided-bindings","title":"&lt;client&gt;"},{"location":"usingcdbcclient/clientinstall/","text":"CDBC Client installation Use NuGet 1. Open Nuget package manager. Right-click your project and select Manager NuGet packages . 2. Install cdbc.data Entry cdbc and search. Select cdbc.data Select the version you want to install and press install Note You can download dll and add reference but it not recommended.","title":"Client installation"},{"location":"usingcdbcclient/clientinstall/#cdbc-client-installation","text":"","title":"CDBC Client installation"},{"location":"usingcdbcclient/clientinstall/#use-nuget","text":"","title":"Use NuGet"},{"location":"usingcdbcclient/clientinstall/#1-open-nuget-package-manager","text":"Right-click your project and select Manager NuGet packages .","title":"1. Open Nuget package manager."},{"location":"usingcdbcclient/clientinstall/#2-install-cdbcdata","text":"Entry cdbc and search. Select cdbc.data Select the version you want to install and press install Note You can download dll and add reference but it not recommended.","title":"2. Install cdbc.data"},{"location":"usingcdbcclient/usingclientoracle/","text":"CDBC Client Configuration CDBC Service use WCF architecture. WCF information should be set in the app.config file. <system.serviceModel> <bindings> <webHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" /> </webHttpBinding> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" /> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbc.cloud/cdbcservice/CdbcService.svc/service\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> <behaviors> <endpointBehaviors> <behavior name= \"webhttp\" > <webHttp/> <soapProcessing /> </behavior> </endpointBehaviors> </behaviors> </system.serviceModel> client-endpoint * address - URL of CDBC service. Creating CdbcConnection C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; Querying with the DataReader C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; CdbcCommand cmd = new CdbcCommand ( \"SELECT * FROM ALL_TABLES\" , conn ); DbDataReader dr = cmd . ExecuteReader (); while ( dr . Read ()) { Console . WriteLine ( String . Format ( \"{0}\" , dr [ 0 ])); } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } } Querying with the DataAdapter CdbcAdapter's Fill method can retrieve data from the data source having save syntax with other sql client. C# string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ); AccessDataReader rdr = cmd . ExecuteReader (); while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ], rdr [ \"ShipCity\" ])); } } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } } Update with the DataAdapter ExecuteNonQuery with the CdbcCommand ExecuteScalar with the CdbcCommand mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"CDBC Client Configuration"},{"location":"usingcdbcclient/usingclientoracle/#cdbc-client-configuration","text":"CDBC Service use WCF architecture. WCF information should be set in the app.config file. <system.serviceModel> <bindings> <webHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" /> </webHttpBinding> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" /> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbc.cloud/cdbcservice/CdbcService.svc/service\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> <behaviors> <endpointBehaviors> <behavior name= \"webhttp\" > <webHttp/> <soapProcessing /> </behavior> </endpointBehaviors> </behaviors> </system.serviceModel> client-endpoint * address - URL of CDBC service.","title":"CDBC Client Configuration"},{"location":"usingcdbcclient/usingclientoracle/#creating-cdbcconnection","text":"C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ;","title":"Creating CdbcConnection"},{"location":"usingcdbcclient/usingclientoracle/#querying-with-the-datareader","text":"C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; CdbcCommand cmd = new CdbcCommand ( \"SELECT * FROM ALL_TABLES\" , conn ); DbDataReader dr = cmd . ExecuteReader (); while ( dr . Read ()) { Console . WriteLine ( String . Format ( \"{0}\" , dr [ 0 ])); } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } }","title":"Querying with the DataReader"},{"location":"usingcdbcclient/usingclientoracle/#querying-with-the-dataadapter","text":"CdbcAdapter's Fill method can retrieve data from the data source having save syntax with other sql client. C# string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ); AccessDataReader rdr = cmd . ExecuteReader (); while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ], rdr [ \"ShipCity\" ])); } } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } }","title":"Querying with the DataAdapter"},{"location":"usingcdbcclient/usingclientoracle/#update-with-the-dataadapter","text":"","title":"Update with the DataAdapter"},{"location":"usingcdbcclient/usingclientoracle/#executenonquery-with-the-cdbccommand","text":"","title":"ExecuteNonQuery with the CdbcCommand"},{"location":"usingcdbcclient/usingclientoracle/#executescalar-with-the-cdbccommand","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"ExecuteScalar with the CdbcCommand"},{"location":"usingcdbcclient/usingclientoracle/#project-layout","text":"mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Project layout"},{"location":"usingcdbcclient/usingclientsqlserver/","text":"CDBC Client Configuration CDBC Service use WCF architecture. WCF information should be set in the app.config file. <system.serviceModel> <bindings> <webHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" /> </webHttpBinding> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" /> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbc.cloud/cdbcservice/CdbcService.svc/service\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> <behaviors> <endpointBehaviors> <behavior name= \"webhttp\" > <webHttp/> <soapProcessing /> </behavior> </endpointBehaviors> </behaviors> </system.serviceModel> client-endpoint * address - URL of CDBC service. Creating CdbcConnection C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; Querying with the DataReader C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; CdbcCommand cmd = new CdbcCommand ( \"SELECT * FROM ALL_TABLES\" , conn ); DbDataReader dr = cmd . ExecuteReader (); while ( dr . Read ()) { Console . WriteLine ( String . Format ( \"{0}\" , dr [ 0 ])); } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } } Querying with the DataAdapter CdbcAdapter's Fill method can retrieve data from the data source having save syntax with other sql client. C# string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ); AccessDataReader rdr = cmd . ExecuteReader (); while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ], rdr [ \"ShipCity\" ])); } } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } } Update with the DataAdapter ExecuteNonQuery with the CdbcCommand ExecuteScalar with the CdbcCommand mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"CDBC Client Configuration"},{"location":"usingcdbcclient/usingclientsqlserver/#cdbc-client-configuration","text":"CDBC Service use WCF architecture. WCF information should be set in the app.config file. <system.serviceModel> <bindings> <webHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" /> </webHttpBinding> <basicHttpBinding> <binding name= \"BasicHttpBinding_ICdbcService\" maxReceivedMessageSize= \"10485760\" useDefaultWebProxy= \"false\" sendTimeout= \"00:10:00\" /> </basicHttpBinding> </bindings> <client> <endpoint address= \"https://cdbc.cloud/cdbcservice/CdbcService.svc/service\" binding= \"basicHttpBinding\" bindingConfiguration= \"BasicHttpBinding_ICdbcService\" contract= \"CdbcService.ICdbcService\" name= \"CdbcService.ICdbcService\" /> </client> <behaviors> <endpointBehaviors> <behavior name= \"webhttp\" > <webHttp/> <soapProcessing /> </behavior> </endpointBehaviors> </behaviors> </system.serviceModel> client-endpoint * address - URL of CDBC service.","title":"CDBC Client Configuration"},{"location":"usingcdbcclient/usingclientsqlserver/#creating-cdbcconnection","text":"C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ;","title":"Creating CdbcConnection"},{"location":"usingcdbcclient/usingclientsqlserver/#querying-with-the-datareader","text":"C# //Same as ODP.net, string connString = \"Data Source=(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = ***.***.***.***)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = ***)));Persist Security Info=True;User ID=*;Password=*\" ; CdbcConnection conn = new CdbcConnection ( connString ); conn . DatabaseProduct = CdbcCommon . Data . Client . Type . DatabaseProductType . Oracle ; conn . UserId = \"unittest\" ; conn . Psk = \"***************\" ; CdbcCommand cmd = new CdbcCommand ( \"SELECT * FROM ALL_TABLES\" , conn ); DbDataReader dr = cmd . ExecuteReader (); while ( dr . Read ()) { Console . WriteLine ( String . Format ( \"{0}\" , dr [ 0 ])); } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } }","title":"Querying with the DataReader"},{"location":"usingcdbcclient/usingclientsqlserver/#querying-with-the-dataadapter","text":"CdbcAdapter's Fill method can retrieve data from the data source having save syntax with other sql client. C# string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ); AccessDataReader rdr = cmd . ExecuteReader (); while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ], rdr [ \"ShipCity\" ])); } } VB.Net string connectionString = \"DataSource=C:\\\\My.accdb\" ; using ( AccessConnection connection = new AccessConnection ( connectionString )) { AccessCommand cmd = new AccessCommand ( \"SELECT * FROM Orders\" , connection ) ; AccessDataReader rdr = cmd . ExecuteReader () ; while ( rdr . Read ()) { Console . WriteLine ( String . Format ( \"\\t{0} --> \\t\\t{1}\" , rdr [ \"ShipName\" ] , rdr [ \"ShipCity\" ] )) ; } }","title":"Querying with the DataAdapter"},{"location":"usingcdbcclient/usingclientsqlserver/#update-with-the-dataadapter","text":"","title":"Update with the DataAdapter"},{"location":"usingcdbcclient/usingclientsqlserver/#executenonquery-with-the-cdbccommand","text":"","title":"ExecuteNonQuery with the CdbcCommand"},{"location":"usingcdbcclient/usingclientsqlserver/#executescalar-with-the-cdbccommand","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"ExecuteScalar with the CdbcCommand"},{"location":"usingcdbcclient/usingclientsqlserver/#project-layout","text":"mkdocs . yml # The configuration file . docs / index . md # The documentation homepage . ... # Other markdown pages , images and other files .","title":"Project layout"}]}